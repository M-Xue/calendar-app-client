/* This div is so that the background colour stays in the view port event if the screen is extended due to viewport resizing issues */
.backgroundColour {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: #F0F2F5;
    z-index: -999;
}


.calendarPage {
    width: 100vw;
    height: 100vh;
}


.contentContainer {
    display: flex;
    height: 100%;

    /* This is to make up for the extra 55px from the padding to make space for the topbar */
    padding-top: 55px;
    box-sizing: border-box;
}

.mainContent {
    flex: 9;
    margin: 30px;

    /* Below is a method to make the final child of a container stretch to fill its container if the viewport is increased vertically */
    /* The source of this method was from this post https://stackoverflow.com/questions/147528/how-do-i-force-a-div-block-to-extend-to-the-bottom-of-a-page-even-if-it-has-no-c */
    /* The demo is here http://jsfiddle.net/NN7ky */
    /* The method includes the two CSS properties below as well as everything in the selectors .mainContent > * and calendarContent */
    display:flex;
    flex-direction:column;
}
.mainContent > * {
    flex-shrink: 0;
    /* This makes it so that all children will not shrink if the viewport is decreased */
    /* Because the flex container has a flex-direction of column, this viewport shrinking direction is vertical */
}
.calendarContent {
    flex-grow: 1;
    /* This overrides the flex-shrink: 0 above and now makes it so that the last element will always grow if the viewport is increased vertically. Because it is the only element with the flex-gorw property, it really does not matter what the key value number is */
}


.sidebarContent {
    flex: 3.5;
    margin: 30px;
    display: flex;
}


.groupName {
    margin-bottom: 30px;
    display: flex;
    justify-content: center;
}
.largeFont {
    font-weight: 600;
    font-size: 30px;
}



@media (max-width: 1024px) {
    .contentContainer {
        display: initial;
        /* By getting rid of display: flex, the sidebar will now go under the mainContent div because they're both div's which are block elements. */
        
    }
    

    .mainContent {
        padding-top: 55px;
        box-sizing: border-box;
        height: calc(100% - 55px);
        /* Making space for the topbar */
    }
}

@media (max-width: 540px) {
    .largeFont {
        font-size: 26px;
    }
}